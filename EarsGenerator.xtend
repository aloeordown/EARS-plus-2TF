/*
 * generated by Xtext 2.26.0
 */
package ears.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import ears.ears.EARS
import ears.ears.UbiquitousRe
import ears.ears.ComplexRe
import java.util.List
import javax.inject.Inject
import java.util.ArrayList
import java.util.stream.Collectors
import java.lang.reflect.Array
import edu.stanford.nlp.ling.*
import edu.stanford.nlp.ie.util.*
import edu.stanford.nlp.pipeline.*
import edu.stanford.nlp.semgraph.*
import edu.stanford.nlp.trees.*
import java.util.Properties
import ears.ears.DataRe
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Arrays
import java.util.Iterator

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EarsGenerator extends AbstractGenerator {
	@Inject extension IQualifiedNameProvider
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (re: resource.allContents.toIterable.filter(EARS)){
			var Ure=resource.allContents.toIterable.filter(UbiquitousRe).toList
			var CR=resource.allContents.toIterable.filter(ComplexRe).toList
			var DR=resource.allContents.toIterable.filter(DataRe).toList
             fsa.generateFile('Test FrameWork of '+ re.fullyQualifiedName.toString("/") + ".txt", gen(re, Ure, CR, DR))
		}
		var  props = new Properties();
		 props.setProperty("annotators", "tokenize,ssplit,pos,lemma,ner,parse,depparse,coref,kbp,quote");
		 
//		 var pipeline = new StanfordCoreNLP(props);

}
	
	def gen(EARS ears, List<UbiquitousRe> Ure,  List<ComplexRe> CR,List<DataRe> DR) {
		var List<String> e = new ArrayList;  
		var List<String> d=new ArrayList;
		var List<String> UREtcn=new ArrayList;
		var List<String> CRtcn=new ArrayList;
		for (ure : Ure) 
		     if (ure.entityname!=ears.name)
		      	e.add(ure.entityname)
		for(cr:CR)
			for(a:cr.action)
				if(a.entityname!=ears.name)
					e.add(a.entityname)
		//去掉重复元素
		var List<String> entity = e.stream().distinct().collect(Collectors.toList());
		//找所有的数据池
		for(dr:DR)
		    d.add(dr.data)
		var List<String> datap=d.stream().distinct().collect(Collectors.toList());
//		StanfordCoreNLP pipeline = new StanfordCoreNLP(ure);

		//找所有的TC
		for(ure:Ure)
		     UREtcn.add(clearEnum(ure.rename))
		for(cr:CR)
			CRtcn.add(clearEnum(cr.rename))
		 '''
		 System testing Security Test Context of «ears.name»:
		 Test Configuration:
		 ------------------------------------------------------------------------------------
		      Test Item      |  «ears.name»              
		 ------------------------------------------------------------------------------------
		  Test Component  | 	«entity.toString().replaceAll("(?:\\[|null|\\]| +)", " ")»
		 
		 Test Objective： Verify the «ears.name» can work
		 
		 Data Pool：
		 «IF datap.isEmpty()»
		 ------------------------------------------------------------------------------------
		 	 Data Partition   | NULL
		 ------------------------------------------------------------------------------------
		 «ELSE»
		 ------------------------------------------------------------------------------------
		 	 Data Partition   |«datap.toString().replaceAll("(?:\\[|null|\\]| +)", " ")»
		 ------------------------------------------------------------------------------------
		 «ENDIF»
		 
		 Test set:
		 «FOR ure:Ure»
		 --------------------------------------------------------------------------------------------------------------------------------
		 		Test Case      |«clearEnum(ure.rename)»TC_PASS
		  Test Requirement |The «ure.entityname» shall «ure.response».
		 --------------------------------------------------------------------------------------------------------------------------------
		 		Test Case      |«clearEnum(ure.rename)»TC_FAIL
		  Test Requirement |The «ure.entityname» shall «ure.response».
		 «ENDFOR»
		 «FOR cr:CR»
		 --------------------------------------------------------------------------------------------------------------------------------
		 	    Test Case      |«clearEnum(cr.rename)»TC_PASS
		  Test Requirement |«FOR p:cr.pre» «p.key» «p.trigger» «ENDFOR», «cr.then» «FOR saction:cr.action» «saction.the» «saction.entityname» «saction.modalVp» «saction.response» «saction.timekey»«saction.time» «saction.conj»«ENDFOR».
		 --------------------------------------------------------------------------------------------------------------------------------
		 		 	    Test Case      |«clearEnum(cr.rename)»TC_FAIL
		 		  Test Requirement |«FOR p:cr.pre» «p.key» «p.trigger» «ENDFOR», «cr.then» «FOR saction:cr.action» «saction.the» «saction.entityname» «saction.modalVp» «saction.response» «saction.timekey»«saction.time» «saction.conj»«ENDFOR».
		 	   		
		 «ENDFOR»            
		 '''
		 
	}
	
	def clearEnum(String str){
		str.replaceAll("\\d*$", "");
	}
	
	
	}
